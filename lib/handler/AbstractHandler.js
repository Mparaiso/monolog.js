// Generated by CoffeeScript 1.6.3
var AbstractHandler, Logger;

Logger = require('../Logger');

AbstractHandler = (function() {
  /* 
  	 	Base Handler class providing the Handler structure
  */

  function AbstractHandler(level, bubble) {
    var processors;
    this.level = level != null ? level : Logger.DEBUG;
    this.bubble = bubble != null ? bubble : true;
    processors = [];
  }

  /*
     Checks whether the given record will be handled by this handler.
  	This is mostly done for performance reasons, to avoid calling processors for nothing.
  	Handlers should still check the record levels within handle(), returning false in isHandling()
  	is no guarantee that handle() will not be called, and isHandling() might not be called
  	for a given record.
  	@param {Array} record
  	@return {Boolean}
  */


  AbstractHandler.prototype.isHandling = function(record) {
    return record.level >= this.level;
  };

  AbstractHandler.prototype.handle = function(record, cb) {
    if (cb instanceof Function) {
      cb(this, record);
    }
    return false;
  };

  AbstractHandler.prototype.handleBatch = function(records) {
    var record, _i, _len;
    for (_i = 0, _len = records.length; _i < _len; _i++) {
      record = records[_i];
      this.handle(record);
    }
  };

  AbstractHandler.prototype.close = function() {};

  AbstractHandler.prototype.pushProcessor = function(callback) {
    if (callback instanceof Function) {
      return this.processors.unshift(callback);
    }
  };

  AbstractHandler.prototype.popProcessor = function() {
    this.processors.shift();
    return this;
  };

  AbstractHandler.prototype.setFormatter = function(formatter) {
    this.formatter = formatter;
  };

  AbstractHandler.prototype.getFormatter = function() {
    return this.formatter;
  };

  AbstractHandler.prototype.setLevel = function(level) {
    this.level = level;
  };

  AbstractHandler.prototype.getLevel = function() {
    return this.level;
  };

  AbstractHandler.prototype.setBubble = function(bubble) {
    this.bubble = bubble;
  };

  AbstractHandler.prototype.getBubble = function() {
    return this.bubble;
  };

  return AbstractHandler;

})();

module.exports = AbstractHandler;

/*
//@ sourceMappingURL=AbstractHandler.map
*/
